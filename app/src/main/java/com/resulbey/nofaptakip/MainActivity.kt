package com.resulbey.nofaptakip

import android.app.AlertDialog
import android.content.SharedPreferences
import android.os.Bundle
import android.view.View
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.content.ContextCompat
import com.google.android.material.button.MaterialButton
import com.google.android.material.card.MaterialCardView
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.material.textfield.TextInputEditText
import java.text.SimpleDateFormat
import java.util.*
import kotlin.math.abs
import kotlinx.coroutines.launch
import android.widget.Toast
import androidx.lifecycle.lifecycleScope
import com.resulbey.nofaptakip.updater.UpdateManager
import android.content.Context
import android.content.Intent
import android.content.PendingIntent
import android.app.AlarmManager
import android.content.pm.PackageManager
import android.os.Build

class MainActivity : AppCompatActivity() {
    private lateinit var prefs: SharedPreferences
    private lateinit var welcomeText: TextView
    private lateinit var streakText: TextView
    private lateinit var nextBadgeText: TextView
    private lateinit var badgesCard: MaterialCardView
    private lateinit var badgesList: TextView
    private lateinit var darkModeButton: MaterialButton
    private lateinit var historyButton: MaterialButton
    private lateinit var allBadgesButton: MaterialButton
    private lateinit var relapseButton: MaterialButton
    private lateinit var emergencyButton: MaterialButton
    private lateinit var updateManager: UpdateManager
    private lateinit var checkUpdateButton: MaterialButton
    
    private val badges = mapOf(
        1 to Pair("Yeni Ba≈ülangƒ±√ß", "ƒ∞lk adƒ±mƒ± attƒ±n! Her yolculuk tek bir adƒ±mla ba≈ülar."),
        3 to Pair("Kararlƒ±", "3 g√ºn dayanarak kararlƒ±lƒ±ƒüƒ±nƒ± g√∂sterdin!"),
        7 to Pair("Haftalƒ±k Ba≈üarƒ±", "Bir haftayƒ± tamamladƒ±n! Beynin iyile≈ümeye ba≈ülƒ±yor."),
        14 to Pair("ƒ∞ki Haftalƒ±k Sava≈ü√ßƒ±", "ƒ∞ki hafta! Artƒ±k yeni alƒ±≈ükanlƒ±klar olu≈üturmaya ba≈üladƒ±n."),
        30 to Pair("Aylƒ±k ≈ûampiyon", "Bir ay! ƒ∞nanƒ±lmaz bir ba≈üarƒ±, dopamin seviyen dengeleniyor."),
        90 to Pair("√ú√ß Aylƒ±k Efsane", "90 g√ºn! Beynin tamamen yenilendi, yeni sen ortaya √ßƒ±ktƒ±."),
        180 to Pair("Altƒ± Aylƒ±k Usta", "180 g√ºn! Artƒ±k tam bir kontrol ustasƒ±sƒ±n."),
        365 to Pair("Yƒ±llƒ±k Efsane", "Bir yƒ±l! Sen artƒ±k bir ilham kaynaƒüƒ±sƒ±n.")
    )
    
    private val motivationalTips = arrayOf(
        // Genel Motivasyon
        "Bug√ºn zor olabilir, ama yarƒ±n daha g√º√ßl√º olacaksƒ±n!",
        "Her 'Hayƒ±r' dediƒüinde, iradenin g√ºc√º artƒ±yor.",
        "Ge√ßmi≈ü seni tanƒ±mlamaz, bug√ºnk√º se√ßimlerin geleceƒüini belirler.",
        "Kendini geli≈ütirmek i√ßin attƒ±ƒüƒ±n her adƒ±m deƒüerlidir.",
        "Zorluklar seni yƒ±ldƒ±rmasƒ±n, her zorluk yeni bir fƒ±rsat!",
        "Ba≈üarƒ± bir s√ºre√ßtir, bir anda olacak bir ≈üey deƒüil.",
        "Her g√ºn yeni bir ba≈ülangƒ±√ß, her an yeni bir fƒ±rsat!",
        "G√º√ßl√º ol, kararlƒ± ol, ba≈üaracaksƒ±n!",

        // Bilimsel Ger√ßekler
        "Pornografi beynindeki √∂d√ºl sistemini bozar ve doƒüal motivasyonunu azaltƒ±r.",
        "A≈üƒ±rƒ± dopamin salƒ±nƒ±mƒ±, beyninin normal aktivitelere kar≈üƒ± duyarsƒ±zla≈ümasƒ±na neden olur.",
        "Mast√ºrbasyon baƒüƒ±mlƒ±lƒ±ƒüƒ±, sosyal ili≈ükilerini ve √∂zg√ºvenini olumsuz etkiler.",
        "Porno izlemek, ger√ßek ili≈ükilere olan ilgini ve tatmin duygunu azaltƒ±r.",
        "Her ge√ßen g√ºn beynin iyile≈üiyor, dopamin resept√∂rlerin normale d√∂n√ºyor.",
        "Beynin artƒ±k daha az uyarƒ±cƒ±ya ihtiya√ß duyuyor, bu harika bir geli≈üme!",
        "Frontal lobun g√º√ßleniyor, karar verme ve d√ºrt√º kontrol√ºn geli≈üiyor.",
        "N√∂ral yollarƒ±n yenileniyor, baƒüƒ±mlƒ±lƒ±k d√∂ng√ºs√ºnden √ßƒ±kƒ±yorsun!",
        "Beynindeki gri madde yoƒüunluƒüu artƒ±yor, bu daha iyi odaklanma demek!",
        "Testosteron seviyen dengeleniyor, enerjin ve motivasyonun artƒ±yor.",
        "Dopamin detoksu yapƒ±yorsun, yakƒ±nda hayattan daha √ßok zevk alacaksƒ±n.",
        "Prefrontal korteksin g√º√ßleniyor, irade g√ºc√ºn her g√ºn artƒ±yor.",

        // Baƒüƒ±mlƒ±lƒ±k ve ƒ∞yile≈üme
        "Baƒüƒ±mlƒ±lƒ±k beynini ele ge√ßirmi≈ü olabilir, ama sen beyninden daha g√º√ßl√ºs√ºn!",
        "Her 'Hayƒ±r' dediƒüinde, yeni ve saƒülƒ±klƒ± n√∂ral baƒülantƒ±lar olu≈üturuyorsun.",
        "Porno, beyninin ger√ßeklik algƒ±sƒ±nƒ± bozar. Sen ger√ßek hayatƒ± se√ß!",
        "Baƒüƒ±mlƒ±lƒ±k d√∂ng√ºs√ºn√º kƒ±rmak zor olabilir, ama imkansƒ±z deƒüil. Sen yapabilirsin!",
        "Beynin plastisite √∂zelliƒüine sahip, yani kendini onarabilir. Ona bu ≈üansƒ± ver!",
        "Her g√ºn temiz kaldƒ±ƒüƒ±nda, beynin biraz daha normale d√∂n√ºyor.",
        "Ger√ßek mutluluk, dopamin baƒüƒ±mlƒ±lƒ±ƒüƒ±ndan kurtulmakla ba≈ülar.",
        "Porno, beyninin √∂d√ºl sistemini hackler. Sen kontrol√º geri al!",

        // Yeni Eklenen Mesajlar
        "Her zorluk, daha g√º√ßl√º bir karakterin tohumudur.",
        "Bug√ºn vazge√ßmemek, yarƒ±n i√ßin gurur kaynaƒüƒ±n olacak.",
        "Ger√ßek √∂zg√ºrl√ºk, d√ºrt√ºlerini kontrol edebilmektir.",
        "Kendine yatƒ±rƒ±m yap, geleceƒüin sana minnettar olacak.",
        "Zor zamanlar g√º√ßl√º insanlar yaratƒ±r.",
        "Her ba≈üarƒ±sƒ±zlƒ±k, ba≈üarƒ±ya giden yolda bir derstir.",
        "Deƒüi≈üim zordur, ama pi≈ümanlƒ±k daha zordur.",
        "K√º√ß√ºk adƒ±mlar, b√ºy√ºk deƒüi≈üimlerin ba≈ülangƒ±cƒ±dƒ±r.",
        "Beynin senin d√º≈ümanƒ±n deƒüil, sadece yeniden eƒüitilmesi gerekiyor.",
        "Baƒüƒ±mlƒ±lƒ±k bir hastalƒ±ktƒ±r, ama iyile≈ümek senin elinde.",
        "Her g√ºn yeni bir zafer ≈üansƒ±dƒ±r.",
        "Ge√ßmi≈üini deƒüi≈ütiremezsin, ama geleceƒüini ≈üekillendirebilirsin.",
        "Ba≈üarƒ± bir se√ßimdir, her g√ºn bu se√ßimi yapƒ±yorsun.",
        "ƒ∞rade kasƒ± gibidir, kullandƒ±k√ßa g√º√ßlenir.",
        "Zorluklarla y√ºzle≈ümek, karakterini g√º√ßlendirir.",
        "Her 'Hayƒ±r' bir zaferdir, her zafer bir adƒ±mdƒ±r.",
        "Baƒüƒ±mlƒ±lƒ±k zincirlerini kƒ±r, √∂zg√ºrl√ºƒü√ºn√º geri al!",
        "Sen d√º≈ü√ºnd√ºƒü√ºnden √ßok daha g√º√ßl√ºs√ºn.",
        "Deƒüi≈üim i√ßeriden ba≈ülar, dƒ±≈üarƒ±dan g√∂r√ºn√ºr.",
        "Bug√ºn√ºn fedakarlƒ±ƒüƒ±, yarƒ±nƒ±n zaferidir."
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        prefs = getSharedPreferences("NoFapPrefs", MODE_PRIVATE)
        updateManager = UpdateManager(this)
        
        welcomeText = findViewById(R.id.welcomeText)
        streakText = findViewById(R.id.streakText)
        nextBadgeText = findViewById(R.id.nextBadgeText)
        badgesCard = findViewById(R.id.badgesCard)
        badgesList = findViewById(R.id.badgesList)
        darkModeButton = findViewById(R.id.darkModeButton)
        historyButton = findViewById(R.id.historyButton)
        allBadgesButton = findViewById(R.id.allBadgesButton)
        relapseButton = findViewById(R.id.relapseButton)
        emergencyButton = findViewById(R.id.emergencyButton)
        checkUpdateButton = findViewById(R.id.checkUpdateButton)
        
        setupWelcomeMessage()
        updateStreak()
        setupButtons()
        updateBadges()
        updateDarkModeButton()
        requestNotificationPermission()
        setupDailyNotification()
        checkForUpdates()
    }
    
    private fun setupWelcomeMessage() {
        val name = prefs.getString("user_name", "") ?: ""
        welcomeText.text = "Ho≈ü geldin, $name! Yolculuƒüunda seninle birlikteyiz."
    }
    
    private fun updateStreak() {
        val startDate = prefs.getLong("startDate", 0)
        if (startDate == 0L) return
        
        val currentStreak = calculateStreak(startDate)
        streakText.text = "$currentStreak g√ºnd√ºr temizsin!"
        
        // Bir sonraki rozete kalan g√ºnleri hesapla
        val nextBadge = badges.entries.find { it.key > currentStreak }
        if (nextBadge != null) {
            val daysLeft = nextBadge.key - currentStreak
            nextBadgeText.text = "${nextBadge.value.first} rozetine $daysLeft g√ºn kaldƒ±!"
        } else {
            nextBadgeText.text = "T√ºm rozetleri kazandƒ±n! Muhte≈üemsin!"
        }
    }
    
    private fun calculateStreak(startDate: Long): Int {
        val start = Calendar.getInstance().apply { timeInMillis = startDate }
        val now = Calendar.getInstance()
        
        return abs((now.timeInMillis - start.timeInMillis) / (24 * 60 * 60 * 1000)).toInt()
    }
    
    private fun updateBadges() {
        val currentStreak = calculateStreak(prefs.getLong("startDate", 0))
        val earnedBadges = badges.filter { it.key <= currentStreak }
        
        if (earnedBadges.isEmpty()) {
            badgesCard.visibility = View.GONE
            return
        }
        
        badgesCard.visibility = View.VISIBLE
        val badgesText = StringBuilder()
        earnedBadges.forEach { (days, badge) ->
            badgesText.append("üèÜ ${badge.first} (${badge.second})\n")
        }
        badgesList.text = badgesText.toString().trimEnd()
    }
    
    private fun setupButtons() {
        darkModeButton.setOnClickListener {
            toggleDarkMode()
        }
        
        historyButton.setOnClickListener {
            showHistory()
        }
        
        allBadgesButton.setOnClickListener {
            showAllBadges()
        }
        
        relapseButton.setOnClickListener {
            showRelapseDialog()
        }
        
        emergencyButton.setOnClickListener {
            showMotivationalTip()
        }
        
        checkUpdateButton.setOnClickListener {
            checkForUpdates(showLoading = true)
        }
    }
    
    private fun toggleDarkMode() {
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        val newMode = !isDarkMode
        
        AppCompatDelegate.setDefaultNightMode(
            if (newMode) AppCompatDelegate.MODE_NIGHT_YES
            else AppCompatDelegate.MODE_NIGHT_NO
        )
        
        prefs.edit().putBoolean("dark_mode", newMode).apply()
        updateDarkModeButton()
    }
    
    private fun updateDarkModeButton() {
        val isDarkMode = prefs.getBoolean("dark_mode", false)
        darkModeButton.text = if (isDarkMode) "A√ßƒ±k Tema" else "Koyu Tema"
        darkModeButton.setIconResource(
            if (isDarkMode) R.drawable.ic_light_mode
            else R.drawable.ic_dark_mode
        )
    }
    
    private fun showHistory() {
        val relapseHistory = mutableListOf<Pair<Long, String>>()
        var currentDate = prefs.getLong("startDate", 0)
        var lastReason = prefs.getString("lastRelapseReason", null)
        
        while (currentDate > 0 && lastReason != null) {
            relapseHistory.add(Pair(currentDate, lastReason))
            currentDate = prefs.getLong("startDate_$currentDate", 0)
            lastReason = prefs.getString("lastRelapseReason_$currentDate", null)
        }
        
        if (relapseHistory.isEmpty()) {
            MaterialAlertDialogBuilder(this)
                .setTitle("Ge√ßmi≈ü")
                .setMessage("Hen√ºz hi√ß relapse olmadƒ±n. Harika gidiyorsun!")
                .setPositiveButton("Tamam", null)
                .show()
            return
        }
        
        val dateFormat = SimpleDateFormat("dd MMMM yyyy", Locale("tr"))
        val historyText = StringBuilder()
        relapseHistory.forEachIndexed { index, (date, reason) ->
            historyText.append("${index + 1}. ${dateFormat.format(Date(date))}\n")
            historyText.append("Neden: $reason\n\n")
        }
        
        MaterialAlertDialogBuilder(this)
            .setTitle("Ge√ßmi≈ü")
            .setMessage(historyText.toString().trimEnd())
            .setPositiveButton("Tamam", null)
            .show()
    }
    
    private fun showAllBadges() {
        val currentStreak = calculateStreak(prefs.getLong("startDate", 0))
        val badgesText = StringBuilder()
        
        badges.forEach { (days, badge) ->
            val isEarned = days <= currentStreak
            val daysLeft = if (!isEarned) days - currentStreak else 0
            
            badgesText.append(if (isEarned) "üèÜ" else "üîí")
            badgesText.append(" ${badge.first}\n")
            badgesText.append("${badge.second}\n")
            if (!isEarned) {
                badgesText.append("Bu rozete ula≈ümana $daysLeft g√ºn kaldƒ±!\n")
            }
            badgesText.append("\n")
        }
        
        MaterialAlertDialogBuilder(this)
            .setTitle("T√ºm Rozetler")
            .setMessage(badgesText.toString().trimEnd())
            .setPositiveButton("Tamam", null)
            .show()
    }
    
    private fun showRelapseDialog() {
        val dialogView = layoutInflater.inflate(R.layout.dialog_relapse, null)
        val reasonInput = dialogView.findViewById<TextInputEditText>(R.id.reasonInput)
        
        val dialog = MaterialAlertDialogBuilder(this)
            .setTitle("Neden Relapse Oldun?")
            .setView(dialogView)
            .setPositiveButton("Kaydet", null) // Butonu ≈üimdilik null olarak ayarlƒ±yoruz
            .setNegativeButton("ƒ∞ptal", null)
            .create()

        dialog.setOnShowListener {
            val positiveButton = dialog.getButton(AlertDialog.BUTTON_POSITIVE)
            positiveButton.setOnClickListener {
                val reason = reasonInput.text.toString()
                if (reason.isBlank()) {
                    reasonInput.error = "L√ºtfen bir sebep girin"
                    return@setOnClickListener
                }
                
                // √ñnceki relapse tarihini ve sebebini sakla
                val oldStartDate = prefs.getLong("startDate", 0)
                if (oldStartDate > 0) {
                    val oldReason = prefs.getString("lastRelapseReason", null)
                    if (oldReason != null) {
                        prefs.edit()
                            .putLong("startDate_$oldStartDate", oldStartDate)
                            .putString("lastRelapseReason_$oldStartDate", oldReason)
                            .apply()
                    }
                }
                
                // Yeni relapse tarihini ve sebebini kaydet
                val relapseDate = System.currentTimeMillis()
                prefs.edit()
                    .putLong("startDate", relapseDate)
                    .putString("lastRelapseReason", reason)
                    .apply()
                
                updateStreak()
                updateBadges()
                
                // Motivasyon mesajƒ± g√∂ster
                showMotivationalTip()
                dialog.dismiss()
            }
        }
        
        dialog.show()
    }
    
    private fun showMotivationalTip() {
        val randomTip = motivationalTips.random()
        MaterialAlertDialogBuilder(this)
            .setTitle("Motivasyon")
            .setMessage(randomTip)
            .setPositiveButton("Te≈üekk√ºrler") { dialog, _ ->
                dialog.dismiss()
            }
            .show()
    }

    private fun requestNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (checkSelfPermission(android.Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {
                MaterialAlertDialogBuilder(this)
                    .setTitle("Bildirim ƒ∞zni")
                    .setMessage("G√ºnl√ºk motivasyon mesajlarƒ± ve rozet kazanƒ±mlarƒ±nƒ± alabilmek i√ßin bildirim iznine ihtiyacƒ±mƒ±z var.")
                    .setPositiveButton("ƒ∞zin Ver") { _, _ ->
                        requestPermissions(arrayOf(android.Manifest.permission.POST_NOTIFICATIONS), 1)
                    }
                    .setCancelable(false)
                    .show()
            }
        }
    }
    
    private fun setupDailyNotification() {
        val alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val intent = Intent(this, DailyNotificationReceiver::class.java)
        val pendingIntent = PendingIntent.getBroadcast(
            this,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val calendar = Calendar.getInstance().apply {
            set(Calendar.HOUR_OF_DAY, 0)
            set(Calendar.MINUTE, 0)
            set(Calendar.SECOND, 0)
            add(Calendar.DAY_OF_YEAR, 1)
        }
        
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            alarmManager.setExactAndAllowWhileIdle(
                AlarmManager.RTC_WAKEUP,
                calendar.timeInMillis,
                pendingIntent
            )
        } else {
            alarmManager.setExact(
                AlarmManager.RTC_WAKEUP,
                calendar.timeInMillis,
                pendingIntent
            )
        }
    }

    private fun checkForUpdates(showLoading: Boolean = false) {
        var progressDialog: AlertDialog? = null
        
        if (showLoading) {
            progressDialog = MaterialAlertDialogBuilder(this)
                .setTitle("G√ºncelleme Kontrol√º")
                .setMessage("G√ºncellemeler kontrol ediliyor...")
                .setView(R.layout.dialog_progress)
                .setCancelable(false)
                .create()
            progressDialog.show()
        }
        
        lifecycleScope.launch {
            try {
                val updateInfo = updateManager.checkForUpdates()
                progressDialog?.dismiss()
                
                if (updateInfo.hasUpdate) {
                    MaterialAlertDialogBuilder(this@MainActivity)
                        .setTitle("G√ºncelleme Mevcut!")
                        .setMessage("Yeni s√ºr√ºm (${updateInfo.latestVersion}) mevcut. G√ºncellemek ister misiniz?")
                        .setPositiveButton("G√ºncelle") { _, _ ->
                            updateManager.requestInstallPermission()
                            updateManager.downloadUpdate(updateInfo.downloadUrl)
                        }
                        .setNegativeButton("Daha Sonra", null)
                        .setCancelable(false)
                        .show()
                } else if (showLoading) {
                    MaterialAlertDialogBuilder(this@MainActivity)
                        .setTitle("G√ºncelleme Kontrol√º")
                        .setMessage("Uygulamanƒ±z g√ºncel! (${BuildConfig.VERSION_NAME})")
                        .setPositiveButton("Tamam", null)
                        .show()
                } else {
                    Toast.makeText(
                        this@MainActivity,
                        "Uygulamanƒ±z g√ºncel! (${BuildConfig.VERSION_NAME})",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            } catch (e: Exception) {
                progressDialog?.dismiss()
                MaterialAlertDialogBuilder(this@MainActivity)
                    .setTitle("Hata")
                    .setMessage(e.message)
                    .setPositiveButton("Tamam", null)
                    .show()
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == 1234 && resultCode == RESULT_OK) {
            // Kullanƒ±cƒ± bilinmeyen kaynaklardan y√ºkleme iznini verdi
            updateManager.installUpdate()
        }
    }
} 